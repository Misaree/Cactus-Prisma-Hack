# -*- coding: utf-8 -*-
"""Presentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17sVHa-9kwzLDfyovcPzwe2tddBHxMBOf
"""

!pip install python-pptx
!pip install pdf2image
!pip install pymupdf


from pptx import Presentation
from pptx.util import Inches, Pt
import spacy
import os
import fitz  # PyMuPDF
from PIL import Image, ImageDraw, ImageFont

def generate_formal_ppt(pdf_file, summarized_text, output_file="Generative_AI_Presentation.pptx"):
    # Load spaCy model for NLP
    nlp = spacy.load("en_core_web_sm")

    def generate_title_from_filename(filename):
        base_name = os.path.splitext(os.path.basename(filename))[0]  # Remove extension
        doc = nlp(base_name.replace("_", " "))  # Process text with spaCy
        keywords = [chunk.text for chunk in doc.noun_chunks]
        return " ".join(keywords[:4]).title() if keywords else base_name[:4].title()

    section_keywords = {
        "Abstract": ["abstract", "summary"],
        "Introduction": ["introduction", "potential", "overview", "functionality"],
        "Literature Review": ["literature review", "related work"],
        "Methodology": ["methodology", "methods", "approach"],
        "Challenges": ["challenges", "accuracy", "compliance", "standards"],
        "SE Assistant Tool": ["SE Assistant", "M-RAG", "tool", "DesDocs"],
        "Evaluation Process": ["evaluation", "criteria", "engineers", "validation"],
        "Future Work": ["future", "enhancements", "next steps", "improvements"],
        "Results": ["results", "findings", "observations"],
        "Conclusion": ["conclusion", "future work", "summary"]
    }

    def classify_text(text, keywords):
        classified_data = {section: [] for section in keywords}
        doc = nlp(text)
        for sentence in doc.sents:
            for section, words in keywords.items():
                if any(word in sentence.text.lower() for word in words):
                    classified_data[section].append(sentence.text.strip())
                    break
        return classified_data

    classified_sections = classify_text(summarized_text, section_keywords)
    prs = Presentation()

    presentation_title = generate_title_from_filename(pdf_file)
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = presentation_title
    slide.placeholders[1].text = "Automated Presentation from Research Summary"

    def get_font_size(text_length):
        return Pt(28) if text_length <= 200 else Pt(26) if text_length <= 400 else Pt(24) if text_length <= 600 else Pt(20) if text_length <= 800 else Pt(16)

    for section, content in classified_sections.items():
        if content:
            slide_layout = prs.slide_layouts[1]
            slide = prs.slides.add_slide(slide_layout)
            slide.shapes.title.text = section
            text_frame = slide.shapes.placeholders[1].text_frame
            text_frame.clear()
            total_text = " ".join(content)
            font_size = get_font_size(len(total_text))
            for sentence in content:
                paragraph = text_frame.add_paragraph()
                paragraph.text = sentence
                paragraph.font.size = font_size
                paragraph.space_after = Pt(6)

    thank_you_slide_layout = prs.slide_layouts[6]
    thank_you_slide = prs.slides.add_slide(thank_you_slide_layout)
    text_box = thank_you_slide.shapes.add_textbox(Inches(3), Inches(3), Inches(3), Inches(1.5))
    text_box.text_frame.text = "Thank You!"
    text_box.text_frame.paragraphs[0].font.size = Pt(44)
    text_box.text_frame.paragraphs[0].alignment = 1

    prs.save(output_file)

    output_folder = "./extracted_images_with_text"
    os.makedirs(output_folder, exist_ok=True)
    doc = fitz.open(pdf_file)

    def add_caption_to_image(image_path, caption_text, output_path):
        with Image.open(image_path) as img:
            width, height = img.size
            new_image = Image.new("RGB", (width, height + 50), "white")
            new_image.paste(img, (0, 0))
            draw = ImageDraw.Draw(new_image)
            font = ImageFont.load_default()
            draw.text((10, height + 10), caption_text, fill="black", font=font)
            new_image.save(output_path)

    for page_num in range(len(doc)):
        page = doc[page_num]
        images = page.get_images(full=True)
        for img_index, img in enumerate(images):
            xref = img[0]
            base_image = doc.extract_image(xref)
            image_bytes = base_image["image"]
            image_ext = base_image["ext"]
            image_filename = os.path.join(output_folder, f"page_{page_num + 1}img{img_index + 1}.{image_ext}")
            with open(image_filename, "wb") as f:
                f.write(image_bytes)
            caption_text = f"Page {page_num + 1}, Image {img_index + 1}"
            add_caption_to_image(image_filename, caption_text, image_filename.replace(f".{image_ext}", "_captioned.png"))
            os.remove(image_filename)

    prs = Presentation(output_file)

    thank_you_index = next((i for i, slide in enumerate(prs.slides) if any(shape.has_text_frame and "Thank You" in shape.text_frame.text for shape in slide.shapes)), None)

    for image in sorted(os.listdir(output_folder)):
        if image.endswith(('.png', '.jpg', '.jpeg')):
            slide_layout = prs.slide_layouts[5]
            slide = prs.slides.add_slide(slide_layout)
            if thank_you_index is not None:
                xml_slides = prs.slides._sldIdLst
                slide_id = xml_slides[-1]
                xml_slides.remove(slide_id)
                xml_slides.insert(thank_you_index, slide_id)
                thank_you_index += 1
            slide.shapes.add_picture(os.path.join(output_folder, image), Inches(1), Inches(1), width=Inches(6))

    prs.save(output_file)
    print(f"Formal PowerPoint presentation saved as {output_file}")

def generate_informal_ppt(summary, pdf_file):
    # Load spaCy model for NLP
    nlp = spacy.load("en_core_web_sm")

    def generate_title_from_filename(filename):
        base_name = os.path.splitext(os.path.basename(filename))[0]
        doc = nlp(base_name.replace("_", " "))
        keywords = [chunk.text for chunk in doc.noun_chunks]
        return " ".join(keywords[:4]).title() if keywords else base_name[:4].title()

    section_keywords = {
        "Abstract": ["abstract", "summary"],
        "Introduction": ["introduction", "potential", "overview", "functionality"],
        "Literature Review": ["literature review", "related work"],
        "Methodology": ["methodology", "methods", "approach"],
        "Challenges": ["challenges", "accuracy", "compliance", "standards"],
        "SE Assistant Tool": ["SE Assistant", "M-RAG", "tool", "DesDocs"],
        "Evaluation Process": ["evaluation", "criteria", "engineers", "validation"],
        "Future Work": ["future", "enhancements", "next steps", "improvements"],
        "Results": ["results", "findings", "observations"],
        "Conclusion": ["conclusion", "future work", "summary"]
    }

    def classify_text(text, keywords):
        classified_data = {section: [] for section in keywords}
        doc = nlp(text)
        for sentence in doc.sents:
            for section, words in keywords.items():
                if any(word in sentence.text.lower() for word in words):
                    classified_data[section].append(sentence.text.strip())
                    break
        return classified_data

    def get_font_size(text_length):
        if text_length <= 200:
            return Pt(28)
        elif text_length <= 400:
            return Pt(26)
        elif text_length <= 600:
            return Pt(24)
        elif text_length <= 800:
            return Pt(20)
        else:
            return Pt(16)

    classified_sections = classify_text(summary, section_keywords)
    prs = Presentation()

    # Title Slide
    presentation_title = generate_title_from_filename(pdf_file)
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = presentation_title
    slide.placeholders[1].text = "Automated Presentation from Research Summary"
    slide.background.fill.solid()
    slide.background.fill.fore_color.rgb = RGBColor(0, 51, 102)
    slide.shapes.title.text_frame.paragraphs[0].font.size = Pt(44)
    slide.shapes.title.text_frame.paragraphs[0].font.bold = True
    slide.shapes.title.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)

    # Content Slides
    for section, content in classified_sections.items():
        if content:
            slide_layout = prs.slide_layouts[1]
            slide = prs.slides.add_slide(slide_layout)
            slide.shapes.title.text = section
            text_box = slide.shapes.placeholders[1]
            text_frame = text_box.text_frame
            text_frame.clear()
            total_text = " ".join(content)
            font_size = get_font_size(len(total_text))

            for sentence in content:
                paragraph = text_frame.add_paragraph()
                paragraph.text = sentence
                paragraph.font.size = font_size
                paragraph.space_after = Pt(6)

            slide.background.fill.solid()
            slide.background.fill.fore_color.rgb = RGBColor(204, 229, 255)

    # Thank You Slide
    thank_you_slide_layout = prs.slide_layouts[6]
    thank_you_slide = prs.slides.add_slide(thank_you_slide_layout)
    thank_you_slide.background.fill.solid()
    thank_you_slide.background.fill.fore_color.rgb = RGBColor(0, 51, 102)

    slide_width, slide_height = prs.slide_width, prs.slide_height
    left, top, width, height = (slide_width - Inches(3)) / 2, (slide_height - Inches(1.5)) / 2, Inches(3), Inches(1.5)

    thank_you_textbox = thank_you_slide.shapes.add_textbox(left, top, width, height)
    text_frame = thank_you_textbox.text_frame
    text_frame.text = "Thank You!"
    p = text_frame.paragraphs[0]
    p.font.size = Pt(44)
    p.font.bold = True
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER

    footer = thank_you_slide.shapes.add_textbox(slide_width - Inches(3.5), slide_height - Inches(0.8), Inches(3), Inches(0.5))
    footer_text_frame = footer.text_frame
    footer_text_frame.text = "This PPT was generated by AI"
    p = footer_text_frame.paragraphs[0]
    p.font.size = Pt(16)
    p.font.color.rgb = RGBColor(128, 128, 128)
    p.bold = True
    p.alignment = PP_ALIGN.RIGHT

    output_file = "Generative_AI_Presentation_Informal.pptx"
    prs.save(output_file)
    print(f"Presentation created and saved as '{output_file}'!")
    return output_file

choice = input("Do you want to generate a formal or informal PPT? (Enter 'formal' or 'informal'): ").strip().lower()
pdf_file= pdf_file
summarized_text= summarized_text

# Call the respective function
if choice == "formal":
    generate_formal_ppt(pdf_file,summarized_text)
elif choice == "informal":
    generate_informal_ppt(summarized_text,pdf_file)
else:
    print("Invalid choice! Please enter 'formal' or 'informal'.")